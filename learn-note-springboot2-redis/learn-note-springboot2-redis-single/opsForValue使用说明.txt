stringRedisTemplate.opsForValue().set("test", "100",60*10,TimeUnit.SECONDS);//向redis里存入数据和设置缓存时间
stringRedisTemplate.boundValueOps("test").increment(-1);//val做-1操作  
stringRedisTemplate.opsForValue().get("test")//根据key获取缓存中的val  
stringRedisTemplate.boundValueOps("test").increment(1);//val +1 
stringRedisTemplate.getExpire("test")//根据key获取过期时间
stringRedisTemplate.getExpire("test",TimeUnit.SECONDS)//根据key获取过期时间并换算成指定单位
stringRedisTemplate.delete("test");//根据key删除缓存 
stringRedisTemplate.hasKey("546545");//检查key是否存在，返回boolean值
stringRedisTemplate.opsForSet().add("red_123", "1","2","3");//向指定key中存放set集合
stringRedisTemplate.expire("red_123",1000 , TimeUnit.MILLISECONDS);//设置过期时间
stringRedisTemplate.opsForSet().isMember("red_123", "1")//根据key查看集合中是否存在指定数据




opsForValue()方法的使用：

1、set(K key, V value)
	新增一个字符串类型的值,key是键，value是值。
	
	Java代码  收藏代码
	redisTemplate.opsForValue().set("stringValue","bbb");


2、get(Object key)
	  获取key键对应的值。
	
	Java代码  收藏代码
	String stringValue = redisTemplate.opsForValue().get("stringValue")+"";
	System.out.println("通过get(Object key)方法获取set(K key, V value)方法新增的字符串值:" + stringValue);


3、append(K key, String value)
	在原有的值基础上新增字符串到末尾。
	
	Java代码  收藏代码
	redisTemplate.opsForValue().append("stringValue","aaa");
	String stringValueAppend = redisTemplate.opsForValue().get("stringValue")+"";
	System.out.println("通过append(K key, String value)方法修改后的字符串:"+stringValueAppend); 

 
4、get(K key, long start, long end)
	截取key键对应值得字符串，从开始下标位置开始到结束下标的位置(包含结束下标)的字符串。
	
	Java代码  收藏代码
	String cutString = redisTemplate.opsForValue().get("stringValue",0,3);
	System.out.println("通过get(K key, long start, long end)方法获取截取的字符串:"+cutString);


5、getAndSet(K key, V value)
	  获取原来key键对应的值并重新赋新值。
	
	Java代码  收藏代码
	String oldAndNewStringValue = redisTemplate.opsForValue().getAndSet("stringValue","ccc")+"";
	System.out.print("通过getAndSet(K key, V value)方法获取原来的" + oldAndNewStringValue + ",");
	String newStringValue = redisTemplate.opsForValue().get("stringValue")+"";
	System.out.println("修改过后的值:"+newStringValue);


6、setBit(K key, long offset, boolean value)
	key键对应的值value对应的ascii码,在offset的位置(从左向右数)变为value。
	
	Java代码  收藏代码
	redisTemplate.opsForValue().setBit("stringValue",1,false);
	newStringValue = redisTemplate.opsForValue().get("stringValue")+"";
	System.out.println("通过setBit(K key,long offset,boolean value)方法修改过后的值:"+newStringValue);


 7、getBit(K key, long offset)
	  判断指定的位置ASCII码的bit位是否为1。
	
	Java代码  收藏代码
	boolean bitBoolean = redisTemplate.opsForValue().getBit("stringValue",1);
	System.out.println("通过getBit(K key,long offset)方法判断指定bit位的值是:" + bitBoolean);


 8、size(K key)
	  获取指定字符串的长度。
	
	Java代码  收藏代码
	Long stringValueLength = redisTemplate.opsForValue().size("stringValue");
	System.out.println("通过size(K key)方法获取字符串的长度:"+stringValueLength);


9、increment(K key, double delta)
	以增量的方式将double值存储在变量中。
	
	Java代码  收藏代码
	double stringValueDouble = redisTemplate.opsForValue().increment("doubleValue",5); 
	System.out.println("通过increment(K key, double delta)方法以增量方式存储double值:" + stringValueDouble);


10、increment(K key, long delta)
	以增量的方式将long值存储在变量中。
	
	Java代码  收藏代码
	double stringValueLong = redisTemplate.opsForValue().increment("longValue",6); 
	System.out.println("通过increment(K key, long delta)方法以增量方式存储long值:" + stringValueLong);


11、setIfAbsent(K key, V value)
	   如果键不存在则新增,存在则不改变已经有的值。
	
	Java代码  收藏代码
	boolean absentBoolean = redisTemplate.opsForValue().setIfAbsent("absentValue","fff");
	System.out.println("通过setIfAbsent(K key, V value)方法判断变量值absentValue是否存在:" + absentBoolean);
	if(absentBoolean){  
	 String absentValue = redisTemplate.opsForValue().get("absentValue")+"";
	 System.out.print(",不存在，则新增后的值是:"+absentValue);
	 boolean existBoolean = redisTemplate.opsForValue().setIfAbsent("absentValue","eee");
	 System.out.print(",再次调用setIfAbsent(K key, V value)判断absentValue是否存在并重新赋值:" + existBoolean);
	 if(!existBoolean){  
	     absentValue = redisTemplate.opsForValue().get("absentValue")+"";
	     System.out.print("如果存在,则重新赋值后的absentValue变量的值是:" + absentValue);
	 }  
	}  
 
 
 12、set(K key, V value, long timeout, TimeUnit unit)
	    设置变量值的过期时间。
	
	Java代码  收藏代码
	redisTemplate.opsForValue().set("timeOutValue","timeOut",5,TimeUnit.SECONDS);
	String timeOutValue = redisTemplate.opsForValue().get("timeOutValue")+"";
	System.out.println("通过set(K key, V value, long timeout, TimeUnit unit)方法设置过期时间，过期之前获取的数据:"+timeOutValue);
	Thread.sleep(5*1000);
	timeOutValue = redisTemplate.opsForValue().get("timeOutValue")+"";
	System.out.print(",等待10s过后，获取的值:"+timeOutValue);


13、set(K key, V value, long offset)
	覆盖从指定位置开始的值。
	
	Java代码  收藏代码
	redisTemplate.opsForValue().set("absentValue","dd",1);
	String overrideString = redisTemplate.opsForValue().get("absentValue")+"";
	System.out.println("通过set(K key, V value, long offset)方法覆盖部分的值:"+overrideString);


 14、multiSet(Map<? extends K,? extends V> map)
	设置map集合到redis。
	
	Java代码  收藏代码
	Map valueMap = new HashMap();
	valueMap.put("valueMap1","map1");
	valueMap.put("valueMap2","map2");
	valueMap.put("valueMap3","map3");
	redisTemplate.opsForValue().multiSet(valueMap);


 15、multiGet(Collection<K> keys)
	根据集合取出对应的value值。
	
	Java代码  收藏代码
	//根据List集合取出对应的value值  
	List paraList = new ArrayList();
	paraList.add("valueMap1");
	paraList.add("valueMap2");
	paraList.add("valueMap3");
	List<String> valueList = redisTemplate.opsForValue().multiGet(paraList);
	for (String value : valueList){  
	 System.out.println("通过multiGet(Collection<K> keys)方法获取map值:" + value);
	}  


16、multiSetIfAbsent(Map<? extends K,? extends V> map)
	如果对应的map集合名称不存在，则添加，如果存在则不做修改。
	
	Java代码  收藏代码
	Map valueMap = new HashMap();
	valueMap.put("valueMap1","map1");
	valueMap.put("valueMap2","map2");
	valueMap.put("valueMap3","map3");
	redisTemplate.opsForValue().multiSetIfAbsent(valueMap);
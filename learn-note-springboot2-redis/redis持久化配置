摘自：https://www.cnblogs.com/xyhh/p/11175036.html

AOF 配置方式
	开启AOF持久化，自动生成appendonly.aof文件
		appendonly yes
			使用AOF做持久化，每一个命令以 Redis 协议的格式来保存，新命令会被追加到文件的末尾，
			Redis 还可以在后台对 AOF 文件进行重写，使得 AOF文件的体积不会超出保存数据集状态所需的实际大小。
			实际上，AOF持久化并不会立即将命令写入到硬盘文件中，而是写入到硬盘缓存，在接下来的策略中，配置多久来从硬盘缓存写入到硬盘文件。所以在一定程度一定条件下，还是会有数据丢失，不过你可以大大减少数据损失
		# appendfsync always
		appendfsync everysec
		# appendfsync no
			always: 每次操作都会立即写入aof文件中
			everysec: 每秒持久化一次(默认配置)
			no: 不主动进行同步操作，默认30s一次
				当然always一定是效率最低的，个人认为everysec就够用了，数据安全性能又高。
				
	测试：
	配置好后，启动redis客户端，输入命令：
		set name cjs
		set age 11
		flushall
	打开appendonly.aof文件
	去掉最后面的flushall(也可以按照redis协议增加命令)，重启客户端和服务端，看数据是否真的持久化了
		keys *
		get name
		get age


RDB配置方式
	快照RDB的持久化方式，将内存中的数据以快照的方式写入二进制文件中，默认的文件名是dump.rdb
		redis.conf默认配置：
			save 900 1
			save 300 10
			save 60 10000
		配置含义：
			900秒内，如果超过1个key被修改，则发起快照保存
			300秒内，如果超过10个key被修改，则发起快照保存
			60秒内，如果1万个key被修改，则发起快照保存
	 默认配置不方便看效果，可将快照频率设大一点，在redis.conf中增加一行：
		save 10 1
	测试：
	配置好后，启动redis客户端，输入命令：
		set name cjs
		set age 11
		flushall
	输入完，发现dump.rdb文件的修改日期变了，并且redis服务端增加了保存日志
	重启redis服务端和客户端
		keys *
		get name
		get age